{"ast":null,"code":"import jsPDF from \"jspdf\";\nexport const pdf = function (_ref) {\n  let {\n    data,\n    headers,\n    filename,\n    title,\n    subheading,\n    date\n  } = _ref;\n  const doc = new jsPDF({\n    orientation: \"l\",\n    unit: \"pt\",\n    format: \"a4\"\n  });\n\n  // Get the page total pt height and pt width based on\n  // https://github.com/MrRio/jsPDF/blob/ddbfc0f0250ca908f8061a72fa057116b7613e78/jspdf.js#L59\n\n  const pageDimensions = {\n    height: 595.28,\n    width: 841.89\n  };\n\n  // Set some general padding to the document\n  const pageMargin = 50;\n  const liveArea = {\n    width: pageDimensions.width - pageMargin,\n    height: pageDimensions.height - pageMargin\n  };\n\n  // Let's set up a standard padding that we can add to known coordinates\n  const padding = 15;\n  doc.setFontSize(8);\n  if (title) {\n    doc.text(title, 200, 29);\n  }\n  if (subheading) {\n    doc.text(subheading, 200, 30);\n  }\n  if (date) {\n    doc.text(date, 200, 32);\n  }\n  const xPositions = [];\n  headers.forEach((heading, index) => {\n    if (heading.hasOwnProperty(\"xPos\")) {\n      doc.text(heading.label, heading.xPos, pageMargin);\n      xPositions.push(heading.xPos);\n    } else {\n      const xPositionForCurrentHeader = pageMargin + index * (liveArea.width / headers.length);\n      const yPositionForHeaders = pageMargin;\n      doc.text(heading.label, index === 0 ? xPositionForCurrentHeader : xPositionForCurrentHeader + padding, yPositionForHeaders);\n      xPositions.push(index === 0 ? xPositionForCurrentHeader : xPositionForCurrentHeader + padding);\n    }\n  });\n  doc.line(pageMargin, pageMargin + 3.5, liveArea.width, pageMargin + 3.5);\n  const baseYPosForRows = pageMargin + padding;\n  let nextYPos = baseYPosForRows;\n\n  // ROWS\n  data.forEach((row, rIndex) => {\n    const rowHeights = [];\n\n    // COLUMNS\n    headers.forEach((column, cIndex) => {\n      const longText = doc.splitTextToSize(String(row[column.key]), xPositions[cIndex] - xPositions[cIndex !== 0 && cIndex - 1]);\n      const rowHeight = longText.length * doc.getLineHeight();\n      rowHeights.push(rowHeight);\n      doc.text(longText, xPositions[cIndex], nextYPos);\n    });\n    nextYPos = nextYPos + padding + Math.max(...rowHeights, 30);\n    if (nextYPos > liveArea.height) {\n      doc.addPage();\n      nextYPos = baseYPosForRows;\n    }\n  });\n  doc.save(filename);\n};","map":{"version":3,"names":["jsPDF","pdf","_ref","data","headers","filename","title","subheading","date","doc","orientation","unit","format","pageDimensions","height","width","pageMargin","liveArea","padding","setFontSize","text","xPositions","forEach","heading","index","hasOwnProperty","label","xPos","push","xPositionForCurrentHeader","length","yPositionForHeaders","line","baseYPosForRows","nextYPos","row","rIndex","rowHeights","column","cIndex","longText","splitTextToSize","String","key","rowHeight","getLineHeight","Math","max","addPage","save"],"sources":["C:/Users/Abdul Rehman/Desktop/Project/First_And_Second_Module_v1.0/frontend/src/components/tables/pdf.js"],"sourcesContent":["import jsPDF from \"jspdf\";\n\nexport const pdf = function ({\n  data,\n  headers,\n  filename,\n  title,\n  subheading,\n  date,\n}) {\n  const doc = new jsPDF({\n    orientation: \"l\",\n    unit: \"pt\",\n    format: \"a4\",\n  });\n\n  // Get the page total pt height and pt width based on\n  // https://github.com/MrRio/jsPDF/blob/ddbfc0f0250ca908f8061a72fa057116b7613e78/jspdf.js#L59\n\n  const pageDimensions = {\n    height: 595.28,\n    width: 841.89,\n  };\n\n  // Set some general padding to the document\n  const pageMargin = 50;\n\n  const liveArea = {\n    width: pageDimensions.width - pageMargin,\n    height: pageDimensions.height - pageMargin,\n  };\n\n  // Let's set up a standard padding that we can add to known coordinates\n  const padding = 15;\n\n  doc.setFontSize(8);\n\n  if (title) {\n    doc.text(title, 200, 29);\n  }\n\n  if (subheading) {\n    doc.text(subheading, 200, 30);\n  }\n  if (date) {\n    doc.text(date, 200, 32);\n  }\n\n  const xPositions = [];\n\n  headers.forEach((heading, index) => {\n    if (heading.hasOwnProperty(\"xPos\")) {\n      doc.text(heading.label, heading.xPos, pageMargin);\n      xPositions.push(heading.xPos);\n    } else {\n      const xPositionForCurrentHeader =\n        pageMargin + index * (liveArea.width / headers.length);\n      const yPositionForHeaders = pageMargin;\n      doc.text(\n        heading.label,\n        index === 0\n          ? xPositionForCurrentHeader\n          : xPositionForCurrentHeader + padding,\n        yPositionForHeaders\n      );\n\n      xPositions.push(\n        index === 0\n          ? xPositionForCurrentHeader\n          : xPositionForCurrentHeader + padding\n      );\n    }\n  });\n\n  doc.line(pageMargin, pageMargin + 3.5, liveArea.width, pageMargin + 3.5);\n\n  const baseYPosForRows = pageMargin + padding;\n  let nextYPos = baseYPosForRows;\n\n  // ROWS\n  data.forEach((row, rIndex) => {\n    const rowHeights = [];\n\n    // COLUMNS\n    headers.forEach((column, cIndex) => {\n      const longText = doc.splitTextToSize(\n        String(row[column.key]),\n        xPositions[cIndex] - xPositions[cIndex !== 0 && cIndex - 1]\n      );\n      const rowHeight = longText.length * doc.getLineHeight();\n      rowHeights.push(rowHeight);\n\n      doc.text(longText, xPositions[cIndex], nextYPos);\n    });\n\n    nextYPos = nextYPos + padding + Math.max(...rowHeights, 30);\n    if (nextYPos > liveArea.height) {\n      doc.addPage();\n      nextYPos = baseYPosForRows;\n    }\n  });\n\n  doc.save(filename);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}